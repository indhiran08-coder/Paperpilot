import streamlit as st
from paper_ingest import extract_text_from_pdf, fetch_arxiv_pdf
from embedder import chunk_text, embed_text
from llm_interface import ask_ollama
import tempfile
import time
import streamlit.components.v1 as components

# --- DASHBOARD-MATCHING SOLID BACKGROUND (no image, matches dashboard/section cards) ---
st.markdown("""
    <style>
    .stApp {
        background: #1e1636 !important;
    }
    body, .stApp { color: #e2e2e2 !important; }
    h1, .stTitle { color: #CABFFF !important; text-shadow: 0 2px 12px #222; }
    .banner {
        background: linear-gradient(90deg, #23235B 0%, #8F5CFF 100%);
        color: #FFD700;
        padding: 18px 30px;
        border-radius: 20px;
        font-size: 1.3em;
        box-shadow: 0 4px 24px 0 rgb(130 70 255 / 10%);
        margin-bottom: 22px;
        text-align: center;
        font-weight: bold;
        letter-spacing: 1px;
    }
    .section-card {
        background: rgba(30, 22, 54, 0.93);
        border-radius: 18px;
        box-shadow: 0 4px 24px 0 rgb(127 97 255 / 14%);
        padding: 18px;
        margin-bottom: 18px;
    }
    .stButton>button {
        background: linear-gradient(90deg, #8F5CFF 0%, #23235B 100%);
        color: #FFD700;
        border-radius: 25px;
        border: none;
        padding: 0.65em 2.2em;
        font-size: 1.13em;
        font-weight: bold;
        box-shadow: 0 4px 16px rgba(130,70,255,0.17);
        transition: transform 0.2s;
        margin-bottom:10px;
    }
    .stButton>button:hover {
        background: linear-gradient(90deg, #FFD700 0%, #8F5CFF 100%);
        color: #23235B;
        transform: scale(1.08);
        box-shadow: 0 8px 32px rgba(130,70,255,0.22);
    }
    .stTextArea textarea {
        background: #18112A;
        color: #e2e2e2;
        border: 2px solid #8F5CFF;
        border-radius: 10px;
        font-size: 1.09em;
        font-family: 'Roboto', monospace;
    }
    .css-1d391kg, .css-1v0mbdj, .stSidebar {
        background: linear-gradient(135deg, #23235B 0%, #8F5CFF 100%) !important;
        color: #FFD700 !important;
    }
    .help-icon {
        font-size: 1.1em;
        vertical-align: middle;
        margin-left:6px;
        cursor:pointer;
    }
    .copy-btn {
        background: #FFD700; color: #23235B; border:none; border-radius:8px; padding:5px 15px; font-weight:bold; cursor:pointer; margin-top:5px; margin-bottom:10px;
    }
    .download-btn {
        background: #8F5CFF; color: #FFD700; border:none; border-radius:8px; padding:5px 15px; font-weight:bold; cursor:pointer; margin-top:5px; margin-bottom:10px;
    }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700&family=Roboto:wght@400&display=swap" rel="stylesheet">
""", unsafe_allow_html=True)

# --- Sidebar Branding & Navigation ---
st.sidebar.image("https://cdn-icons-png.flaticon.com/512/992/992700.png", width=60)
st.sidebar.markdown('<div class="banner">ЁЯзСтАНЁЯФм <b>PaperPilot</b></div>', unsafe_allow_html=True)
nav = st.sidebar.radio("Navigate", ["Home", "Upload/Fetch", "AI Actions", "History", "Settings"])
st.sidebar.markdown("**Instructions:**\n- Upload or fetch a paper\n- Preview extraction\n- Try AI actions!\n\n---\n**Made by AlgoWarriors**")

# --- Language Selector: Indian Languages Added ---
language = st.sidebar.selectbox(
    "ЁЯМР Language",
    [
        "English",
        "Hindi",
        "Tamil",
        "Telugu",
        "Kannada",
        "Malayalam",
        "Bengali",
        "Marathi",
        "Gujarati",
        "Punjabi"
    ]
)

# Simple Language Dictionary Demo (Indian Regional Languages)
lang_dict = {
    "English": {
        "welcome": "Welcome to PaperPilot!",
        "upload": "Upload or Fetch a Paper",
        "actions": "AI Actions",
        "history": "Your History",
        "settings": "Settings",
        "paper": "Paper",
        "preview": "Preview Extracted Text",
        "ai_actions": "AI Actions"
    },
    "Hindi": {
        "welcome": "рдкреЗрдкрд░рдкрд╛рдпрд▓рдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!",
        "upload": "рдкреЗрдкрд░ рдЕрдкрд▓реЛрдб рдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "actions": "рдПрдЖрдИ рдХреНрд░рд┐рдпрд╛рдПрдБ",
        "history": "рдЖрдкрдХрд╛ рдЗрддрд┐рд╣рд╛рд╕",
        "settings": "рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
        "paper": "рдкреЗрдкрд░",
        "preview": "рдирд┐рд╖реНрдХрд░реНрд╖рд┐рдд рдкрд╛рда рдХрд╛ рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди",
        "ai_actions": "рдПрдЖрдИ рдХреНрд░рд┐рдпрд╛рдПрдБ"
    },
    "Tamil": {
        "welcome": "PaperPilot-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!",
        "upload": "роЖро╡рогродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН роЕро▓рпНро▓родрпБ рокрпЖро▒ро╡рпБроорпН",
        "actions": "AI роЪрпЖропро▓рпНроХро│рпН",
        "history": "роЙроЩрпНроХро│рпН ро╡ро░ро▓ро╛ро▒рпБ",
        "settings": "роЕроорпИрокрпНрокрпБроХро│рпН",
        "paper": "роЖро╡рогроорпН",
        "preview": "рокро┐ро░ро┐родрпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯ роЙро░рпИропро┐ройрпН роорпБройрпНройрпЛроЯрпНроЯроорпН",
        "ai_actions": "AI роЪрпЖропро▓рпНроХро│рпН"
    },
    "Telugu": {
        "welcome": "р░кр▒Зр░кр░░р▒Н р░кр▒Ир░▓р░Яр▒НтАМр░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В!",
        "upload": "р░кр▒Зр░кр░░р▒НтАМр░ир▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░кр▒Кр░Вр░жр░Вр░бр░┐",
        "actions": "AI р░Ър░░р▒Нр░пр░▓р▒Б",
        "history": "р░ор▒А р░Ър░░р░┐р░др▒Нр░░",
        "settings": "р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒Нр░╕р▒Н",
        "paper": "р░кр▒Зр░кр░░р▒Н",
        "preview": "р░Ор░Хр▒Нр░╕р▒НтАМр░Яр▒Нр░░р░╛р░Хр▒Нр░Яр▒Н р░Ър▒Зр░╕р░┐р░и р░Яр▒Жр░Хр▒Нр░╕р▒Нр░Яр▒Н р░кр▒Нр░░р░┐р░╡р▒Нр░пр▒В",
        "ai_actions": "AI р░Ър░░р▒Нр░пр░▓р▒Б"
    },
    "Kannada": {
        "welcome": "р▓кр│Зр▓кр▓░р│Н р▓кр│Ир▓▓р▓Яр│НтАМр▓Чр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д!",
        "upload": "р▓кр│Зр▓кр▓░р│Н р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓Ер▓ер▓╡р▓╛ р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐",
        "actions": "AI р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр▓│р│Б",
        "history": "р▓ир▓┐р▓ор│Нр▓о р▓Зр▓др▓┐р▓╣р▓╛р▓╕",
        "settings": "р▓╕р│Жр▓Яр│Нр▓Яр▓┐р▓Вр▓Чр│Нр▓╕р│Н",
        "paper": "р▓кр│Зр▓кр▓░р│Н",
        "preview": "р▓╣р│Жр│Вр▓░р▓др│Жр▓Чр│Жр▓пр▓▓р▓╛р▓ж р▓кр▓ар│Нр▓пр▓ж р▓кр│Вр▓░р│Нр▓╡р▓жр│Гр▓╖р│Нр▓Яр▓┐",
        "ai_actions": "AI р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр▓│р│Б"
    },
    "Malayalam": {
        "welcome": "р┤кр╡Зр┤кр╡Нр┤кр╡╝ р┤кр╡Ир┤▓р┤▒р╡Нр┤▒р┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В!",
        "upload": "р┤кр╡Зр┤кр╡Нр┤кр╡╝ р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤ир╡Зр┤Яр╡Бр┤Х",
        "actions": "AI р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤ир┤Щр╡Нр┤Щр╡╛",
        "history": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ър┤░р┤┐р┤др╡Нр┤░р┤В",
        "settings": "р┤Хр╡Нр┤░р┤ор╡Ар┤Хр┤░р┤гр┤Щр╡Нр┤Щр╡╛",
        "paper": "р┤кр╡Зр┤кр╡Нр┤кр╡╝",
        "preview": "р┤ир┤┐р┤░р╡Нр┤╡р┤Ър┤┐р┤Ър╡Нр┤Ъ р┤Яр╡Жр┤Хр╡Нр┤╕р╡Нр┤▒р╡Нр┤▒р┤┐р┤ир╡Нр┤▒р╡Ж р┤кр╡Нр┤░р┤┐р┤╡р╡Нр┤пр╡В",
        "ai_actions": "AI р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤ир┤Щр╡Нр┤Щр╡╛"
    },
    "Bengali": {
        "welcome": "PaperPilot-ржП рж╕рзНржмрж╛ржЧрждржо!",
        "upload": "ржкрзЗржкрж╛рж░ ржЖржкрж▓рзЛржб ржХрж░рзБржи ржмрж╛ рж╕ржВржЧрзНрж░рж╣ ржХрж░рзБржи",
        "actions": "AI ржХрж╛рж░рзНржпрж╛ржмрж▓рзА",
        "history": "ржЖржкржирж╛рж░ ржЗрждрж┐рж╣рж╛рж╕",
        "settings": "рж╕рзЗржЯрж┐ржВрж╕",
        "paper": "ржкрзЗржкрж╛рж░",
        "preview": "ржПржХрзНрж╕ржЯрзНрж░рж╛ржХрзНржЯрзЗржб ржЯрзЗржХрзНрж╕ржЯрзЗрж░ ржкрзВрж░рзНржмрж░рзВржк",
        "ai_actions": "AI ржХрж╛рж░рзНржпрж╛ржмрж▓рзА"
    },
    "Marathi": {
        "welcome": "PaperPilot рдордзреНрдпреЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ!",
        "upload": "рдкреЗрдкрд░ рдЕрдкрд▓реЛрдб рдХрд░рд╛ рдХрд┐рдВрд╡рд╛ рдорд┐рд│рд╡рд╛",
        "actions": "AI рдХреНрд░рд┐рдпрд╛",
        "history": "рддреБрдордЪрд╛ рдЗрддрд┐рд╣рд╛рд╕",
        "settings": "рд╕реЗрдЯрд┐рдВрдЧреНрдЬ",
        "paper": "рдкреЗрдкрд░",
        "preview": "рдирд┐рдШрд╛рд▓реЗрд▓реЗ рдордЬрдХреВрд░ рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди",
        "ai_actions": "AI рдХреНрд░рд┐рдпрд╛"
    },
    "Gujarati": {
        "welcome": "PaperPilot ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!",
        "upload": "рккрлЗрккрк░ ркЕрккрк▓рлЛркб ркХрк░рлЛ ркЕркерк╡рк╛ ркорлЗрк│рк╡рлЛ",
        "actions": "AI ркХрлНрк░рк┐ркпрк╛ркУ",
        "history": "ркдркорк╛рк░рлЛ ркЗркдрк┐рк╣рк╛рк╕",
        "settings": "рк╕рлЗркЯрк┐ркВркЧрлНрк╕",
        "paper": "рккрлЗрккрк░",
        "preview": "ркПркХрлНрк╕ркЯрлНрк░рк╛ркХрлНркЯ ркХрк░рлЗрк▓ ркЯрлЗркХрлНрк╕рлНркЯркирлБркВ рккрлВрк░рлНрк╡ркжрк░рлНрк╢рки",
        "ai_actions": "AI ркХрлНрк░рк┐ркпрк╛ркУ"
    },
    "Punjabi": {
        "welcome": "PaperPilot ри╡ри┐рй▒риЪ ридрйБри╣ри╛рибри╛ ри╕ри╡ри╛риЧрид ри╣рйИ!",
        "upload": "рикрйЗрикри░ риЕрй▒рикри▓рйЛриб риХри░рйЛ риЬри╛риВ ри▓ри╡рйЛ",
        "actions": "AI риХри╛ри░ри╡ри╛риИриЖриВ",
        "history": "ридрйБри╣ри╛рибри╛ риЗридри┐ри╣ри╛ри╕",
        "settings": "ри╕рйИриЯри┐рй░риЧриЬри╝",
        "paper": "рикрйЗрикри░",
        "preview": "риХрй▒риври┐риЖ ри╣рйЛриЗриЖ рикри╛риа рикрйВри░ри╡ри╡ри┐рй▒риЪ",
        "ai_actions": "AI риХри╛ри░ри╡ри╛риИриЖриВ"
    }
}

# --- Session State for History ---
if 'history' not in st.session_state:
    st.session_state.history = []

if 'paper_text' not in st.session_state:
    st.session_state.paper_text = ""
if 'paper_title' not in st.session_state:
    st.session_state.paper_title = ""

def reset_paper():
    st.session_state.paper_text = ""
    st.session_state.paper_title = ""

def add_to_history(title, text):
    st.session_state.history.append({'title': title, 'text': text})

def download_text(text, filename):
    st.download_button("Download Output", text, file_name=filename, key=filename, help="Download the generated output.")

# --- Only show one section at a time ---
st.markdown('<div class="banner">ЁЯЪА Scientific Research LLM Assistant<br><span style="font-size:1rem;">Accelerate your discoveries with AI-powered reading & writing!</span></div>', unsafe_allow_html=True)

if nav == "Home":
    st.markdown(f"<h2>{lang_dict[language]['welcome']}</h2>", unsafe_allow_html=True)
    st.info("This is the home screen. Use the sidebar to navigate.")

elif nav == "Upload/Fetch":
    st.markdown('<div class="section-card">', unsafe_allow_html=True)
    st.subheader(f"1я╕ПтГг {lang_dict[language]['upload']}")
    upload_option = st.radio("Choose input method:", ["ЁЯУд Upload PDF", "ЁЯМР Fetch from arXiv"])

    # Tooltip help icon
    st.markdown("Upload a PDF <span class='help-icon' title='Supported: standard scientific PDFs.'>тЭУ</span>", unsafe_allow_html=True)

    if upload_option == "ЁЯУд Upload PDF":
        uploaded_file = st.file_uploader("Upload a PDF", type="pdf", on_change=reset_paper)
        if uploaded_file:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
                tmp_file.write(uploaded_file.read())
                tmp_file_path = tmp_file.name
            try:
                st.session_state.paper_text = extract_text_from_pdf(tmp_file_path)
                st.session_state.paper_title = uploaded_file.name
                st.success(f"PDF '{uploaded_file.name}' uploaded and extracted.")
                add_to_history(st.session_state.paper_title, st.session_state.paper_text)
            except Exception as e:
                st.error(f"Failed to extract text from PDF: {e}")
    elif upload_option == "ЁЯМР Fetch from arXiv":
        query = st.text_input("Enter arXiv search query or paper title/ID")
        # Autocomplete suggestion box
        if query:
            st.markdown("Recent queries: <span style='color:#FFD700;'>arXiv:2309.00123, arXiv:2205.12345</span>", unsafe_allow_html=True)
        if st.button("Fetch Paper"):
            with st.spinner("ЁЯФД Fetching from arXiv..."):
                st.progress(0)
                for percent_complete in range(1, 101, 10):
                    time.sleep(0.03)
                    st.progress(percent_complete)
                try:
                    pdf_path, title, paper = fetch_arxiv_pdf(query)
                    if pdf_path:
                        st.session_state.paper_text = extract_text_from_pdf(pdf_path)
                        st.session_state.paper_title = title
                        st.success(f"Fetched: {title}")
                        add_to_history(st.session_state.paper_title, st.session_state.paper_text)
                    else:
                        st.session_state.paper_text = ""
                        st.session_state.paper_title = ""
                        st.error("No paper found for that query!")
                except Exception as e:
                    st.session_state.paper_text = ""
                    st.session_state.paper_title = ""
                    st.error(f"Error fetching or extracting arXiv paper: {e}")
    st.markdown('</div>', unsafe_allow_html=True)

    # --- Preview Extracted Text ---
    if st.session_state.paper_text:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.subheader(f"2я╕ПтГг {lang_dict[language]['preview']}")
        st.markdown(
            f"<span style='font-size:1.5em; font-weight:700; color:#FFD700;'>{lang_dict[language]['paper']}: {st.session_state.paper_title}</span>",
            unsafe_allow_html=True
        )
        st.text_area("Extracted Text (first 800 chars)", st.session_state.paper_text[:800], height=180)
        with st.expander("ЁЯУЦ Show full extracted text"):
            st.write(st.session_state.paper_text)
        st.markdown('</div>', unsafe_allow_html=True)

elif nav == "AI Actions":
    if st.session_state.paper_text:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.subheader(f"3я╕ПтГг {lang_dict[language]['ai_actions']}")
        chunks = chunk_text(st.session_state.paper_text)

        def run_ollama_action(prompt, spinner_message, output_label, filename="output.txt"):
            try:
                with st.spinner(spinner_message):
                    output = ask_ollama(prompt)
                st.markdown(f"**{output_label}:**")
                st.markdown(
                    f"<div style='background:#18112A;border-radius:10px;padding:12px;margin-bottom:10px;color:#FFD700;' id='ai-output'>{output}</div>",
                    unsafe_allow_html=True
                )
                # Copy to clipboard button (JS hack)
                components.html(f"""
                <button class="copy-btn" onclick="navigator.clipboard.writeText(`{output.replace("`", "\\`")}`)">Copy Output</button>
                """, height=40)
                download_text(output, filename)
            except Exception as e:
                st.error(f"Error communicating with Ollama: {e}")

        ai_col1, ai_col2 = st.columns(2)

        with ai_col1:
            st.markdown("##### ЁЯзк Generate Hypothesis <span class='help-icon' title='Suggest a novel research hypothesis based on your paper.'>тЭУ</span>", unsafe_allow_html=True)
            if st.button("Generate Hypothesis"):
                prompt = (
                    f"Read this research paper and suggest a novel research hypothesis. "
                    f"Paper content:\n{st.session_state.paper_text[:2000]}"
                )
                run_ollama_action(prompt, "тЬи Ollama is thinking...", "Hypothesis Suggestion", "hypothesis.txt")

            st.markdown("##### ЁЯТб Grant Proposal <span class='help-icon' title='Draft a grant proposal based on your paper.'>тЭУ</span>", unsafe_allow_html=True)
            if st.button("Draft Grant Proposal"):
                prompt = (
                    f"Based on this research paper, draft a brief grant proposal. "
                    f"Include motivation, objectives, and expected outcomes. "
                    f"Paper content:\n{st.session_state.paper_text[:2000]}"
                )
                run_ollama_action(prompt, "ЁЯТ╕ Ollama is drafting proposal...", "Grant Proposal Draft", "grant_proposal.txt")

        with ai_col2:
            st.markdown("##### ЁЯУЭ Literature Review <span class='help-icon' title='Get a concise literature review.'>тЭУ</span>", unsafe_allow_html=True)
            if st.button("Automate Literature Review"):
                prompt = (
                    f"Write a concise literature review based on this paper. "
                    f"Focus on research gaps and opportunities. "
                    f"Paper content:\n{st.session_state.paper_text[:2000]}"
                )
                run_ollama_action(prompt, "ЁЯУЪ Ollama is generating a literature review...", "Literature Review", "literature_review.txt")

            st.markdown("##### ЁЯФН Ask About the Paper <span class='help-icon' title='Ask any question about the loaded paper.'>тЭУ</span>", unsafe_allow_html=True)
            question = st.text_input("Your question about the paper")
            if st.button("Get Answer") and question.strip():
                prompt = f"Answer this question about the following paper:\nQuestion: {question}\nPaper content:\n{st.session_state.paper_text[:2000]}"
                run_ollama_action(prompt, "ЁЯдЦ Ollama is answering...", "Answer", "answer.txt")

        st.markdown('</div>', unsafe_allow_html=True)
    else:
        st.info("Please upload a PDF or fetch a paper from arXiv to enable AI actions.")

elif nav == "History":
    st.markdown('<div class="section-card">', unsafe_allow_html=True)
    st.subheader(f"ЁЯУЬ {lang_dict[language]['history']}")
    if st.session_state.history:
        for entry in st.session_state.history[::-1]:
            st.markdown(
                f"<span style='font-size:1.2em; font-weight:600; color:#FFD700;'>{entry['title']}</span>",
                unsafe_allow_html=True
            )
            with st.expander("Preview"):
                st.write(entry['text'][:800] + ("..." if len(entry['text']) > 800 else ""))
            st.markdown("---")
    else:
        st.info("No papers uploaded or fetched yet.")
    st.markdown('</div>', unsafe_allow_html=True)

elif nav == "Settings":
    st.markdown('<div class="section-card">', unsafe_allow_html=True)
    st.subheader(f"тЪЩя╕П {lang_dict[language]['settings']}")
    st.markdown("Select your preferred language, adjust accessibility options, or reset session.")
    font_size = st.slider("Font Size for Extracted Text", 12, 24, 16)
    st.markdown(f"<style>.stTextArea textarea {{ font-size: {font_size}px !important; }}</style>", unsafe_allow_html=True)
    if st.button("Reset All Session Data"):
        st.session_state.paper_text = ""
        st.session_state.paper_title = ""
        st.session_state.history = []
        st.success("Session reset! All papers and actions cleared.")
    st.markdown('</div>', unsafe_allow_html=True)